"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/Chat/page",{

/***/ "(app-pages-browser)/./app/firebase.js":
/*!*************************!*\
  !*** ./app/firebase.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCommentToMessage: function() { return /* binding */ addCommentToMessage; },\n/* harmony export */   addMessageToChannel: function() { return /* binding */ addMessageToChannel; },\n/* harmony export */   addMessageToPrivateChannel: function() { return /* binding */ addMessageToPrivateChannel; },\n/* harmony export */   addUserToFirestore: function() { return /* binding */ addUserToFirestore; },\n/* harmony export */   auth: function() { return /* binding */ auth; },\n/* harmony export */   createPrivateChannel: function() { return /* binding */ createPrivateChannel; },\n/* harmony export */   getAllCommentsFromMessage: function() { return /* binding */ getAllCommentsFromMessage; },\n/* harmony export */   getAllMessagesFromChannel: function() { return /* binding */ getAllMessagesFromChannel; },\n/* harmony export */   listenForComments: function() { return /* binding */ listenForComments; },\n/* harmony export */   listenForMessages: function() { return /* binding */ listenForMessages; },\n/* harmony export */   updateLikesInFirebase: function() { return /* binding */ updateLikesInFirebase; }\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"(app-pages-browser)/./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/storage */ \"(app-pages-browser)/./node_modules/firebase/storage/dist/esm/index.esm.js\");\n// Import the functions you need from the SDKs you need\n\n\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBe7LVB7NZGQ4ih869GmtX2iwYvE0hzbLE\",\n    authDomain: \"discordbot-5a1b5.firebaseapp.com\",\n    projectId: \"discordbot-5a1b5\",\n    storageBucket: \"discordbot-5a1b5.appspot.com\",\n    messagingSenderId: \"942074563442\",\n    appId: \"1:942074563442:web:ee7686c5bce688559aebeb\"\n};\n// Initialize Firebase\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\nconst addUserToFirestore = async (user)=>{\n    const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"users\", user.uid);\n    try {\n        const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(userRef);\n        if (!docSnap.exists()) {\n            // Document with this uid does not exist, so add it\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"users\"), {\n                uid: user.uid,\n                photo: user.photoURL,\n                displayName: user.displayName,\n                email: user.email,\n                createdAt: Date.now(),\n                isAdmin: false\n            });\n            // Create a private channel for the user\n            // if there is no channel then only create if already exists ignore\n            await createPrivateChannel(user.uid);\n            console.log(\"User added to Firestore and private channel created.\");\n        } else {\n            console.log(\"Document with uid\", user.uid, \"already exists.\");\n        }\n    } catch (error) {\n        console.error(\"Error adding user to Firestore: \", error);\n    }\n};\nconst createPrivateChannel = async (userId)=>{\n    const userChannelRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"privateChannels\", userId);\n    try {\n        // Check if the private channel already exists\n        const channelSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(userChannelRef);\n        if (!channelSnapshot.exists()) {\n            // Private channel does not exist, so create it\n            console.log(\"Private channel created for user:\", userId);\n        } else {\n            console.log(\"Private channel already exists for user:\", userId);\n        }\n    } catch (error) {\n        console.error(\"Error creating private channel:\", error);\n    }\n};\nconst addMessageToPrivateChannel = async (messageData, setImageLoading)=>{\n    const user = auth.currentUser;\n    const privateChannelRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"privateChannels\", user.uid);\n    // Ensure the private channel exists\n    const privateChannelSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(privateChannelRef);\n    if (!privateChannelSnap.exists()) {\n        console.error(\"Private channel does not exist for user with UID:\", user.uid);\n        return;\n    }\n    // Add message to messages subcollection of the private channel\n    const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"privateChannels\", user.uid, \"messages\");\n    // Indicate that the image is being fetched\n    setImageLoading(true);\n    const imageUrl = await fetchImageForMessage(messageData.text);\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(messagesRef, {\n            text: messageData.text,\n            userName: user.displayName,\n            userPhoto: user.photoURL,\n            imageUrl: imageUrl,\n            timestamp: Date.now(),\n            likes: 0,\n            replies: 0\n        });\n        console.log(\"Message added successfully to private channel.\");\n    // Download the image\n    } catch (error) {\n        console.error(\"Error adding message to private channel: \", error);\n    } finally{\n        // Indicate that the image is now ready to be displayed\n        setImageLoading(false);\n    }\n};\n// Function to listen for messages in the user's private channel\nconst fetchImageForMessage = async (message)=>{\n    console.log(\"fetching image for:\", message);\n    try {\n        const response = await fetch(\"https://sandbox-410710.el.r.appspot.com/?prompt=\".concat(message));\n        const data = await response.text();\n        console.log(\"data:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching image:\", error);\n        return null;\n    }\n};\nconst addMessageToChannel = async (channelId, messageData, setImageLoading)=>{\n    // Create channel document if not exists\n    const channelRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"channels\", channelId);\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.setDoc)(channelRef, {\n        name: channelId\n    }, {\n        merge: true\n    });\n    const user = auth.currentUser;\n    // Add message to messages subcollection\n    const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\");\n    console.log(user);\n    console.log(messageData.text);\n    // Indicate that the image is being fetched\n    setImageLoading(true);\n    const imageUrl = await fetchImageForMessage(messageData.text);\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(messagesRef, {\n            text: messageData.text,\n            userName: user.displayName,\n            userPhoto: user.photoURL,\n            imageUrl: imageUrl,\n            timestamp: Date.now(),\n            likes: 0,\n            replies: 0\n        });\n        console.log(\"Message added successfully.\");\n    // Download the image\n    } catch (error) {\n        console.error(\"Error adding message: \", error);\n    } finally{\n        // Indicate that the image is now ready to be displayed\n        setImageLoading(false);\n    }\n};\nconst listenForComments = (channelId, messageId, callback)=>{\n    const commentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\", messageId, \"comments\");\n    const orderedCommentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(commentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"date\", \"asc\"));\n    const unsubscribe = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(orderedCommentsQuery, (snapshot)=>{\n        const newComments = [];\n        snapshot.docChanges().forEach((change)=>{\n            if (change.type === \"added\") {\n                newComments.push({\n                    id: change.doc.id,\n                    ...change.doc.data()\n                });\n            }\n        });\n        callback(newComments);\n    });\n    return unsubscribe; // Return the unsubscribe function\n};\nconst listenForMessages = (channelId, callback)=>{\n    const user = auth.currentUser;\n    if (channelId === \"Private\") {\n        const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"privateChannels\", user.uid, \"messages\");\n        const orderedMessagesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(messagesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"timestamp\", \"desc\"));\n        const unsubscribe = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(orderedMessagesQuery, (snapshot)=>{\n            const messages = [];\n            snapshot.forEach((doc)=>{\n                messages.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            // Reverse the order of messages to display the newest first\n            callback(messages.reverse());\n        });\n        return unsubscribe; // Return the unsubscribe function\n    }\n    const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\");\n    const orderedMessagesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(messagesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"timestamp\", \"desc\"));\n    const unsubscribe = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(orderedMessagesQuery, (snapshot)=>{\n        const messages = [];\n        snapshot.forEach((doc)=>{\n            messages.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        // Reverse the order of messages to display the newest first\n        callback(messages.reverse());\n    });\n    return unsubscribe; // Return the unsubscribe function\n};\n// Function to add a new comment to a message\nconst addCommentToMessage = async (channelId, messageId, commentData)=>{\n    // Create message document if not exists\n    const messageRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"channels\", channelId, \"messages\", messageId);\n    try {\n        // Get the message document snapshot\n        const messageDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(messageRef);\n        if (messageDoc.exists()) {\n            // Get the current replies count from the message data\n            const currentReplies = messageDoc.data().replies || 0;\n            // Increment the replies count by 1\n            const newRepliesCount = currentReplies + 1;\n            // Update the message document with the new replies count\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(messageRef, {\n                replies: newRepliesCount\n            });\n            // Add comment to comments subcollection\n            const commentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\", messageId, \"comments\");\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(commentsRef, {\n                text: commentData.text,\n                sender: commentData.sender,\n                userPhoto: commentData.userPhoto,\n                date: Date.now(),\n                likes: commentData.likes || 0\n            });\n            console.log(\"Comment added successfully.\");\n        } else {\n            console.error(\"Message not found.\");\n        }\n    } catch (error) {\n        console.error(\"Error adding comment: \", error);\n    }\n};\n// Function to retrieve all messages from a channel\nconst getAllMessagesFromChannel = async (channelId)=>{\n    const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\");\n    const orderedMessagesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(messagesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"timestamp\", \"desc\"));\n    try {\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(orderedMessagesQuery);\n        const messages = [];\n        querySnapshot.forEach((doc)=>{\n            messages.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        console.log(messages.rev);\n        return messages.reverse();\n    } catch (error) {\n        console.error(\"Error getting messages: \", error);\n        return [];\n    }\n};\n// Function to retrieve all comments from a message\nconst getAllCommentsFromMessage = async (channelId, messageId)=>{\n    const commentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\", messageId, \"comments\");\n    const commentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(commentsRef);\n    try {\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(commentsQuery);\n        const comments = [];\n        querySnapshot.forEach((doc)=>{\n            comments.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return comments;\n    } catch (error) {\n        console.error(\"Error getting comments: \", error);\n        return [];\n    }\n};\nconst updateLikesInFirebase = async (channelId, messageId, newLikesCount)=>{\n    console.log(\"Updating likes in Firebase:\", channelId, messageId, newLikesCount);\n    const messageRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"channels\", channelId, \"messages\", messageId);\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(messageRef, {\n            likes: newLikesCount\n        });\n        console.log(\"Likes updated successfully in Firebase.\");\n    } catch (error) {\n        console.error(\"Error updating likes in Firebase:\", error);\n    }\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/firebase.js\n"));

/***/ })

});