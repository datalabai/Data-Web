"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/Chat/page",{

/***/ "(app-pages-browser)/./app/firebase.js":
/*!*************************!*\
  !*** ./app/firebase.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCommentToMessage: function() { return /* binding */ addCommentToMessage; },\n/* harmony export */   addMessageToChannel: function() { return /* binding */ addMessageToChannel; },\n/* harmony export */   addMessageToPrivateChannel: function() { return /* binding */ addMessageToPrivateChannel; },\n/* harmony export */   addUserToFirestore: function() { return /* binding */ addUserToFirestore; },\n/* harmony export */   auth: function() { return /* binding */ auth; },\n/* harmony export */   createPrivateChannel: function() { return /* binding */ createPrivateChannel; },\n/* harmony export */   getAllCommentsFromMessage: function() { return /* binding */ getAllCommentsFromMessage; },\n/* harmony export */   getAllMessagesFromChannel: function() { return /* binding */ getAllMessagesFromChannel; },\n/* harmony export */   listenForComments: function() { return /* binding */ listenForComments; },\n/* harmony export */   listenForMessages: function() { return /* binding */ listenForMessages; },\n/* harmony export */   updateLikesInFirebase: function() { return /* binding */ updateLikesInFirebase; }\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"(app-pages-browser)/./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/storage */ \"(app-pages-browser)/./node_modules/firebase/storage/dist/esm/index.esm.js\");\n// Import the functions you need from the SDKs you need\n\n\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBe7LVB7NZGQ4ih869GmtX2iwYvE0hzbLE\",\n    authDomain: \"discordbot-5a1b5.firebaseapp.com\",\n    projectId: \"discordbot-5a1b5\",\n    storageBucket: \"discordbot-5a1b5.appspot.com\",\n    messagingSenderId: \"942074563442\",\n    appId: \"1:942074563442:web:ee7686c5bce688559aebeb\"\n};\n// Initialize Firebase\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\nconst addUserToFirestore = async (user)=>{\n    const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"users\", user.uid);\n    try {\n        const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(userRef);\n        if (!docSnap.exists()) {\n            // Document with this uid does not exist, so add it\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"users\"), {\n                uid: user.uid,\n                photo: user.photoURL,\n                displayName: user.displayName,\n                email: user.email,\n                createdAt: Date.now(),\n                isAdmin: false\n            });\n            // Create a private channel for the user\n            // if there is no channel then only create if already exists ignore\n            await createPrivateChannel(user.uid);\n            console.log(\"User added to Firestore and private channel created.\");\n        } else {\n            console.log(\"Document with uid\", user.uid, \"already exists.\");\n        }\n    } catch (error) {\n        console.error(\"Error adding user to Firestore: \", error);\n    }\n};\nconst createPrivateChannel = async (userId)=>{\n    const userChannelRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"privateChannels\", userId);\n    try {\n        // Check if the private channel already exists\n        const channelSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(userChannelRef);\n        if (!channelSnapshot.exists()) {\n            // Private channel does not exist, so create it\n            console.log(\"Private channel created for user:\", userId);\n        } else {\n            console.log(\"Private channel already exists for user:\", userId);\n        }\n    } catch (error) {\n        console.error(\"Error creating private channel:\", error);\n    }\n};\nconst addMessageToPrivateChannel = async (messageData, setImageLoading)=>{\n    const user = auth.currentUser;\n    let privateChannelRef;\n    privateChannelRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"privateChannels\", user.uid);\n    // Ensure the private channel exists\n    const privateChannelSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(privateChannelRef);\n    if (!privateChannelSnap.exists()) {\n        console.error(\"Private channel does not exist for user with UID:\", user.uid);\n        return;\n    }\n    // Add message to messages subcollection of the private channel\n    const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"privateChannels\", user.uid, \"messages\");\n    // Indicate that the image is being fetched\n    setImageLoading(true);\n    const imageUrl = await fetchImageForMessage(messageData.text);\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(messagesRef, {\n            text: messageData.text,\n            userName: user.displayName,\n            userPhoto: user.photoURL,\n            imageUrl: imageUrl,\n            timestamp: Date.now(),\n            likes: 0,\n            replies: 0\n        });\n        console.log(\"Message added successfully to private channel.\");\n    // Download the image\n    } catch (error) {\n        console.error(\"Error adding message to private channel: \", error);\n    } finally{\n        // Indicate that the image is now ready to be displayed\n        setImageLoading(false);\n    }\n};\n// Function to listen for messages in the user's private channel\nconst fetchImageForMessage = async (message)=>{\n    console.log(\"fetching image for:\", message);\n    try {\n        const response = await fetch(\"https://sandbox-410710.el.r.appspot.com/?prompt=\".concat(message));\n        const data = await response.text();\n        console.log(\"data:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching image:\", error);\n        return null;\n    }\n};\nconst addMessageToChannel = async (channelId, messageData, setImageLoading)=>{\n    // Create channel document if not exists\n    const channelRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"channels\", channelId);\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.setDoc)(channelRef, {\n        name: channelId\n    }, {\n        merge: true\n    });\n    const user = auth.currentUser;\n    // Add message to messages subcollection\n    const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\");\n    console.log(user);\n    console.log(messageData.text);\n    // Indicate that the image is being fetched\n    setImageLoading(true);\n    const imageUrl = await fetchImageForMessage(messageData.text);\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(messagesRef, {\n            text: messageData.text,\n            userName: user.displayName,\n            userPhoto: user.photoURL,\n            imageUrl: imageUrl,\n            timestamp: Date.now(),\n            likes: 0,\n            replies: 0\n        });\n        console.log(\"Message added successfully.\");\n    // Download the image\n    } catch (error) {\n        console.error(\"Error adding message: \", error);\n    } finally{\n        // Indicate that the image is now ready to be displayed\n        setImageLoading(false);\n    }\n};\nconst listenForComments = (channelId, messageId, callback)=>{\n    const commentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\", messageId, \"comments\");\n    const orderedCommentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(commentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"date\", \"asc\"));\n    const unsubscribe = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(orderedCommentsQuery, (snapshot)=>{\n        const newComments = [];\n        snapshot.docChanges().forEach((change)=>{\n            if (change.type === \"added\") {\n                newComments.push({\n                    id: change.doc.id,\n                    ...change.doc.data()\n                });\n            }\n        });\n        callback(newComments);\n    });\n    return unsubscribe; // Return the unsubscribe function\n};\nconst listenForMessages = (channelId, callback)=>{\n    const user = auth.currentUser;\n    if (channelId === \"Private\") {\n        const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"privateChannels\", user.uid, \"messages\");\n        const orderedMessagesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(messagesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"timestamp\", \"desc\"));\n        const unsubscribe = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(orderedMessagesQuery, (snapshot)=>{\n            const messages = [];\n            snapshot.forEach((doc)=>{\n                messages.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            // Reverse the order of messages to display the newest first\n            callback(messages.reverse());\n        });\n        return unsubscribe; // Return the unsubscribe function\n    }\n    const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\");\n    const orderedMessagesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(messagesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"timestamp\", \"desc\"));\n    const unsubscribe = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(orderedMessagesQuery, (snapshot)=>{\n        const messages = [];\n        snapshot.forEach((doc)=>{\n            messages.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        // Reverse the order of messages to display the newest first\n        callback(messages.reverse());\n    });\n    return unsubscribe; // Return the unsubscribe function\n};\n// Function to add a new comment to a message\nconst addCommentToMessage = async (channelId, messageId, commentData)=>{\n    // Create message document if not exists\n    const messageRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"channels\", channelId, \"messages\", messageId);\n    try {\n        // Get the message document snapshot\n        const messageDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(messageRef);\n        if (messageDoc.exists()) {\n            // Get the current replies count from the message data\n            const currentReplies = messageDoc.data().replies || 0;\n            // Increment the replies count by 1\n            const newRepliesCount = currentReplies + 1;\n            // Update the message document with the new replies count\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(messageRef, {\n                replies: newRepliesCount\n            });\n            // Add comment to comments subcollection\n            const commentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\", messageId, \"comments\");\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(commentsRef, {\n                text: commentData.text,\n                sender: commentData.sender,\n                userPhoto: commentData.userPhoto,\n                date: Date.now(),\n                likes: commentData.likes || 0\n            });\n            console.log(\"Comment added successfully.\");\n        } else {\n            console.error(\"Message not found.\");\n        }\n    } catch (error) {\n        console.error(\"Error adding comment: \", error);\n    }\n};\n// Function to retrieve all messages from a channel\nconst getAllMessagesFromChannel = async (channelId)=>{\n    const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\");\n    const orderedMessagesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(messagesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"timestamp\", \"desc\"));\n    try {\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(orderedMessagesQuery);\n        const messages = [];\n        querySnapshot.forEach((doc)=>{\n            messages.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        console.log(messages.rev);\n        return messages.reverse();\n    } catch (error) {\n        console.error(\"Error getting messages: \", error);\n        return [];\n    }\n};\n// Function to retrieve all comments from a message\nconst getAllCommentsFromMessage = async (channelId, messageId)=>{\n    const commentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"channels\", channelId, \"messages\", messageId, \"comments\");\n    const commentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(commentsRef);\n    try {\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(commentsQuery);\n        const comments = [];\n        querySnapshot.forEach((doc)=>{\n            comments.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return comments;\n    } catch (error) {\n        console.error(\"Error getting comments: \", error);\n        return [];\n    }\n};\nconst updateLikesInFirebase = async (channelId, messageId, newLikesCount)=>{\n    console.log(\"Updating likes in Firebase:\", channelId, messageId, newLikesCount);\n    const messageRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"channels\", channelId, \"messages\", messageId);\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(messageRef, {\n            likes: newLikesCount\n        });\n        console.log(\"Likes updated successfully in Firebase.\");\n    } catch (error) {\n        console.error(\"Error updating likes in Firebase:\", error);\n    }\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cz8zMTNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydCB0aGUgZnVuY3Rpb25zIHlvdSBuZWVkIGZyb20gdGhlIFNES3MgeW91IG5lZWRcbmltcG9ydCB7IGluaXRpYWxpemVBcHAgfSBmcm9tIFwiZmlyZWJhc2UvYXBwXCI7XG5pbXBvcnQgeyBnZXRBdXRoIH0gZnJvbSBcImZpcmViYXNlL2F1dGhcIjtcbmltcG9ydCB7IHF1ZXJ5LHdoZXJlLGdldEZpcmVzdG9yZSwgY29sbGVjdGlvbiwgYWRkRG9jLCBnZXREb2NzLCBnZXREb2MsIGRvYywgdXBkYXRlRG9jLHNldERvYyxvcmRlckJ5LG9uU25hcHNob3R9IGZyb20gXCJmaXJlYmFzZS9maXJlc3RvcmVcIjtcbmltcG9ydCB7IEZpZWxkVmFsdWUgfSBmcm9tIFwiZmlyZWJhc2UvZmlyZXN0b3JlXCI7XG5pbXBvcnQgeyBnZXRTdG9yYWdlLCByZWYsIHVwbG9hZEJ5dGVzLCBnZXREb3dubG9hZFVSTCB9IGZyb20gXCJmaXJlYmFzZS9zdG9yYWdlXCI7XG5cbmNvbnN0IGZpcmViYXNlQ29uZmlnID0ge1xuICBhcGlLZXk6IFwiQUl6YVN5QmU3TFZCN05aR1E0aWg4NjlHbXRYMml3WXZFMGh6YkxFXCIsXG4gIGF1dGhEb21haW46IFwiZGlzY29yZGJvdC01YTFiNS5maXJlYmFzZWFwcC5jb21cIixcbiAgcHJvamVjdElkOiBcImRpc2NvcmRib3QtNWExYjVcIixcbiAgc3RvcmFnZUJ1Y2tldDogXCJkaXNjb3JkYm90LTVhMWI1LmFwcHNwb3QuY29tXCIsXG4gIG1lc3NhZ2luZ1NlbmRlcklkOiBcIjk0MjA3NDU2MzQ0MlwiLFxuICBhcHBJZDogXCIxOjk0MjA3NDU2MzQ0Mjp3ZWI6ZWU3Njg2YzViY2U2ODg1NTlhZWJlYlwiXG59O1xuXG4vLyBJbml0aWFsaXplIEZpcmViYXNlXG5jb25zdCBhcHAgPSBpbml0aWFsaXplQXBwKGZpcmViYXNlQ29uZmlnKTtcblxuY29uc3QgYXV0aCA9IGdldEF1dGgoYXBwKTtcbmNvbnN0IGRiID0gZ2V0RmlyZXN0b3JlKGFwcCk7XG5cbmV4cG9ydCBjb25zdCBhZGRVc2VyVG9GaXJlc3RvcmUgPSBhc3luYyAodXNlcikgPT4ge1xuICBjb25zdCB1c2VyUmVmID0gZG9jKGRiLCBcInVzZXJzXCIsIHVzZXIudWlkKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGRvY1NuYXAgPSBhd2FpdCBnZXREb2ModXNlclJlZik7XG5cbiAgICBpZiAoIWRvY1NuYXAuZXhpc3RzKCkpIHtcbiAgICAgIC8vIERvY3VtZW50IHdpdGggdGhpcyB1aWQgZG9lcyBub3QgZXhpc3QsIHNvIGFkZCBpdFxuICAgICAgYXdhaXQgYWRkRG9jKGNvbGxlY3Rpb24oZGIsIFwidXNlcnNcIiksIHtcbiAgICAgICAgdWlkOiB1c2VyLnVpZCxcbiAgICAgICAgcGhvdG86IHVzZXIucGhvdG9VUkwsXG4gICAgICAgIGRpc3BsYXlOYW1lOiB1c2VyLmRpc3BsYXlOYW1lLFxuICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgY3JlYXRlZEF0OiBEYXRlLm5vdygpLFxuICAgICAgICBpc0FkbWluOiBmYWxzZSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgYSBwcml2YXRlIGNoYW5uZWwgZm9yIHRoZSB1c2VyXG4gICAgICAvLyBpZiB0aGVyZSBpcyBubyBjaGFubmVsIHRoZW4gb25seSBjcmVhdGUgaWYgYWxyZWFkeSBleGlzdHMgaWdub3JlXG4gICAgICBhd2FpdCBjcmVhdGVQcml2YXRlQ2hhbm5lbCh1c2VyLnVpZCk7XG4gICAgICBjb25zb2xlLmxvZyhcIlVzZXIgYWRkZWQgdG8gRmlyZXN0b3JlIGFuZCBwcml2YXRlIGNoYW5uZWwgY3JlYXRlZC5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRG9jdW1lbnQgd2l0aCB1aWRcIiwgdXNlci51aWQsIFwiYWxyZWFkeSBleGlzdHMuXCIpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIHVzZXIgdG8gRmlyZXN0b3JlOiBcIiwgZXJyb3IpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlUHJpdmF0ZUNoYW5uZWwgPSBhc3luYyAodXNlcklkKSA9PiB7XG4gIGNvbnN0IHVzZXJDaGFubmVsUmVmID0gZG9jKGRiLCBcInByaXZhdGVDaGFubmVsc1wiLCB1c2VySWQpO1xuXG4gIHRyeSB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHByaXZhdGUgY2hhbm5lbCBhbHJlYWR5IGV4aXN0c1xuICAgIGNvbnN0IGNoYW5uZWxTbmFwc2hvdCA9IGF3YWl0IGdldERvYyh1c2VyQ2hhbm5lbFJlZik7XG5cbiAgICBpZiAoIWNoYW5uZWxTbmFwc2hvdC5leGlzdHMoKSkge1xuICAgICAgLy8gUHJpdmF0ZSBjaGFubmVsIGRvZXMgbm90IGV4aXN0LCBzbyBjcmVhdGUgaXRcbiAgICAgIGNvbnNvbGUubG9nKFwiUHJpdmF0ZSBjaGFubmVsIGNyZWF0ZWQgZm9yIHVzZXI6XCIsIHVzZXJJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiUHJpdmF0ZSBjaGFubmVsIGFscmVhZHkgZXhpc3RzIGZvciB1c2VyOlwiLCB1c2VySWQpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgcHJpdmF0ZSBjaGFubmVsOlwiLCBlcnJvcik7XG4gIH1cbn07XG5cblxuZXhwb3J0IGNvbnN0IGFkZE1lc3NhZ2VUb1ByaXZhdGVDaGFubmVsID0gYXN5bmMgKG1lc3NhZ2VEYXRhLCBzZXRJbWFnZUxvYWRpbmcpID0+IHtcbiAgY29uc3QgdXNlciA9IGF1dGguY3VycmVudFVzZXI7XG4gIGxldCBwcml2YXRlQ2hhbm5lbFJlZiA7XG5cblxuICBwcml2YXRlQ2hhbm5lbFJlZiA9IGRvYyhkYiwgXCJwcml2YXRlQ2hhbm5lbHNcIiwgdXNlci51aWQpO1xuXG4gIC8vIEVuc3VyZSB0aGUgcHJpdmF0ZSBjaGFubmVsIGV4aXN0c1xuICBjb25zdCBwcml2YXRlQ2hhbm5lbFNuYXAgPSBhd2FpdCBnZXREb2MocHJpdmF0ZUNoYW5uZWxSZWYpO1xuICBpZiAoIXByaXZhdGVDaGFubmVsU25hcC5leGlzdHMoKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJQcml2YXRlIGNoYW5uZWwgZG9lcyBub3QgZXhpc3QgZm9yIHVzZXIgd2l0aCBVSUQ6XCIsIHVzZXIudWlkKTtcbiAgICByZXR1cm47XG4gIH1cblxuXG4gIC8vIEFkZCBtZXNzYWdlIHRvIG1lc3NhZ2VzIHN1YmNvbGxlY3Rpb24gb2YgdGhlIHByaXZhdGUgY2hhbm5lbFxuICBjb25zdCBtZXNzYWdlc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwicHJpdmF0ZUNoYW5uZWxzXCIsIHVzZXIudWlkLCBcIm1lc3NhZ2VzXCIpO1xuXG4gIC8vIEluZGljYXRlIHRoYXQgdGhlIGltYWdlIGlzIGJlaW5nIGZldGNoZWRcbiAgc2V0SW1hZ2VMb2FkaW5nKHRydWUpO1xuXG4gIGNvbnN0IGltYWdlVXJsID0gYXdhaXQgZmV0Y2hJbWFnZUZvck1lc3NhZ2UobWVzc2FnZURhdGEudGV4dCk7XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBhZGREb2MobWVzc2FnZXNSZWYsIHtcbiAgICAgIHRleHQ6IG1lc3NhZ2VEYXRhLnRleHQsXG4gICAgICB1c2VyTmFtZTogdXNlci5kaXNwbGF5TmFtZSxcbiAgICAgIHVzZXJQaG90bzogdXNlci5waG90b1VSTCxcbiAgICAgIGltYWdlVXJsOiBpbWFnZVVybCxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIGxpa2VzOiAwLFxuICAgICAgcmVwbGllczogMFxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKFwiTWVzc2FnZSBhZGRlZCBzdWNjZXNzZnVsbHkgdG8gcHJpdmF0ZSBjaGFubmVsLlwiKTtcbiAgICAvLyBEb3dubG9hZCB0aGUgaW1hZ2VcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIG1lc3NhZ2UgdG8gcHJpdmF0ZSBjaGFubmVsOiBcIiwgZXJyb3IpO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIEluZGljYXRlIHRoYXQgdGhlIGltYWdlIGlzIG5vdyByZWFkeSB0byBiZSBkaXNwbGF5ZWRcbiAgICBzZXRJbWFnZUxvYWRpbmcoZmFsc2UpO1xuICB9XG59O1xuXG5cbi8vIEZ1bmN0aW9uIHRvIGxpc3RlbiBmb3IgbWVzc2FnZXMgaW4gdGhlIHVzZXIncyBwcml2YXRlIGNoYW5uZWxcblxuY29uc3QgZmV0Y2hJbWFnZUZvck1lc3NhZ2UgPSBhc3luYyAobWVzc2FnZSkgPT4ge1xuICBjb25zb2xlLmxvZygnZmV0Y2hpbmcgaW1hZ2UgZm9yOicsIG1lc3NhZ2UpO1xuICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9zYW5kYm94LTQxMDcxMC5lbC5yLmFwcHNwb3QuY29tLz9wcm9tcHQ9JHttZXNzYWdlfWApO1xuICAgICAgY29uc3QgZGF0YT1hd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICBjb25zb2xlLmxvZygnZGF0YTonLCBkYXRhKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgaW1hZ2U6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBhZGRNZXNzYWdlVG9DaGFubmVsID0gYXN5bmMgKGNoYW5uZWxJZCwgbWVzc2FnZURhdGEsIHNldEltYWdlTG9hZGluZykgPT4ge1xuICAvLyBDcmVhdGUgY2hhbm5lbCBkb2N1bWVudCBpZiBub3QgZXhpc3RzXG4gIGNvbnN0IGNoYW5uZWxSZWYgPSBkb2MoZGIsIFwiY2hhbm5lbHNcIiwgY2hhbm5lbElkKTtcbiAgYXdhaXQgc2V0RG9jKGNoYW5uZWxSZWYsIHsgbmFtZTogY2hhbm5lbElkIH0sIHsgbWVyZ2U6IHRydWUgfSk7XG5cbiAgY29uc3QgdXNlciA9IGF1dGguY3VycmVudFVzZXI7XG5cbiAgLy8gQWRkIG1lc3NhZ2UgdG8gbWVzc2FnZXMgc3ViY29sbGVjdGlvblxuICBjb25zdCBtZXNzYWdlc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiY2hhbm5lbHNcIiwgY2hhbm5lbElkLCBcIm1lc3NhZ2VzXCIpO1xuXG4gIGNvbnNvbGUubG9nKHVzZXIpO1xuICBjb25zb2xlLmxvZyhtZXNzYWdlRGF0YS50ZXh0KTtcblxuICAvLyBJbmRpY2F0ZSB0aGF0IHRoZSBpbWFnZSBpcyBiZWluZyBmZXRjaGVkXG4gIHNldEltYWdlTG9hZGluZyh0cnVlKTtcblxuICBjb25zdCBpbWFnZVVybCA9IGF3YWl0IGZldGNoSW1hZ2VGb3JNZXNzYWdlKG1lc3NhZ2VEYXRhLnRleHQpO1xuXG4gIHRyeSB7XG4gICAgICBhd2FpdCBhZGREb2MobWVzc2FnZXNSZWYsIHtcbiAgICAgICAgICB0ZXh0OiBtZXNzYWdlRGF0YS50ZXh0LFxuICAgICAgICAgIHVzZXJOYW1lOiB1c2VyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgIHVzZXJQaG90bzogdXNlci5waG90b1VSTCxcbiAgICAgICAgICBpbWFnZVVybDogaW1hZ2VVcmwsXG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgIGxpa2VzOiAwLFxuICAgICAgICAgIHJlcGxpZXM6IDBcbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2coXCJNZXNzYWdlIGFkZGVkIHN1Y2Nlc3NmdWxseS5cIik7XG5cbiAgICAgIC8vIERvd25sb2FkIHRoZSBpbWFnZVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFkZGluZyBtZXNzYWdlOiBcIiwgZXJyb3IpO1xuICB9IGZpbmFsbHkge1xuICAgICAgLy8gSW5kaWNhdGUgdGhhdCB0aGUgaW1hZ2UgaXMgbm93IHJlYWR5IHRvIGJlIGRpc3BsYXllZFxuICAgICAgc2V0SW1hZ2VMb2FkaW5nKGZhbHNlKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGxpc3RlbkZvckNvbW1lbnRzID0gKGNoYW5uZWxJZCwgbWVzc2FnZUlkLCBjYWxsYmFjaykgPT4ge1xuICBjb25zdCBjb21tZW50c1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiY2hhbm5lbHNcIiwgY2hhbm5lbElkLCBcIm1lc3NhZ2VzXCIsIG1lc3NhZ2VJZCwgXCJjb21tZW50c1wiKTtcbiAgY29uc3Qgb3JkZXJlZENvbW1lbnRzUXVlcnkgPSBxdWVyeShjb21tZW50c1JlZiwgb3JkZXJCeShcImRhdGVcIiwgXCJhc2NcIikpO1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gb25TbmFwc2hvdChvcmRlcmVkQ29tbWVudHNRdWVyeSwgKHNuYXBzaG90KSA9PiB7XG4gICAgY29uc3QgbmV3Q29tbWVudHMgPSBbXTtcbiAgICBzbmFwc2hvdC5kb2NDaGFuZ2VzKCkuZm9yRWFjaCgoY2hhbmdlKSA9PiB7XG4gICAgICBpZiAoY2hhbmdlLnR5cGUgPT09IFwiYWRkZWRcIikge1xuICAgICAgICBuZXdDb21tZW50cy5wdXNoKHsgaWQ6IGNoYW5nZS5kb2MuaWQsIC4uLmNoYW5nZS5kb2MuZGF0YSgpIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNhbGxiYWNrKG5ld0NvbW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHVuc3Vic2NyaWJlOyAvLyBSZXR1cm4gdGhlIHVuc3Vic2NyaWJlIGZ1bmN0aW9uXG59O1xuXG5leHBvcnQgY29uc3QgbGlzdGVuRm9yTWVzc2FnZXMgPSAoY2hhbm5lbElkLCBjYWxsYmFjaykgPT4ge1xuICBjb25zdCB1c2VyPWF1dGguY3VycmVudFVzZXI7XG4gIGlmKGNoYW5uZWxJZCA9PT0gJ1ByaXZhdGUnKVxuICB7XG4gICAgY29uc3QgbWVzc2FnZXNSZWYgPSBjb2xsZWN0aW9uKGRiLCBcInByaXZhdGVDaGFubmVsc1wiLCB1c2VyLnVpZCwgXCJtZXNzYWdlc1wiKTtcbiAgY29uc3Qgb3JkZXJlZE1lc3NhZ2VzUXVlcnkgPSBxdWVyeShtZXNzYWdlc1JlZiwgb3JkZXJCeShcInRpbWVzdGFtcFwiLCBcImRlc2NcIikpO1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gb25TbmFwc2hvdChvcmRlcmVkTWVzc2FnZXNRdWVyeSwgKHNuYXBzaG90KSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgICBzbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcbiAgICAgIG1lc3NhZ2VzLnB1c2goeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0pO1xuICAgIH0pO1xuICAgIC8vIFJldmVyc2UgdGhlIG9yZGVyIG9mIG1lc3NhZ2VzIHRvIGRpc3BsYXkgdGhlIG5ld2VzdCBmaXJzdFxuICAgIGNhbGxiYWNrKG1lc3NhZ2VzLnJldmVyc2UoKSk7XG4gIH0pOyBcbiAgcmV0dXJuIHVuc3Vic2NyaWJlOyAvLyBSZXR1cm4gdGhlIHVuc3Vic2NyaWJlIGZ1bmN0aW9uXG4gIH1cbiAgY29uc3QgbWVzc2FnZXNSZWYgPSBjb2xsZWN0aW9uKGRiLCBcImNoYW5uZWxzXCIsIGNoYW5uZWxJZCwgXCJtZXNzYWdlc1wiKTtcbiAgY29uc3Qgb3JkZXJlZE1lc3NhZ2VzUXVlcnkgPSBxdWVyeShtZXNzYWdlc1JlZiwgb3JkZXJCeShcInRpbWVzdGFtcFwiLCBcImRlc2NcIikpO1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gb25TbmFwc2hvdChvcmRlcmVkTWVzc2FnZXNRdWVyeSwgKHNuYXBzaG90KSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgICBzbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcbiAgICAgIG1lc3NhZ2VzLnB1c2goeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0pO1xuICAgIH0pO1xuICAgIC8vIFJldmVyc2UgdGhlIG9yZGVyIG9mIG1lc3NhZ2VzIHRvIGRpc3BsYXkgdGhlIG5ld2VzdCBmaXJzdFxuICAgIGNhbGxiYWNrKG1lc3NhZ2VzLnJldmVyc2UoKSk7XG4gIH0pO1xuXG4gIHJldHVybiB1bnN1YnNjcmliZTsgLy8gUmV0dXJuIHRoZSB1bnN1YnNjcmliZSBmdW5jdGlvblxufTtcblxuLy8gRnVuY3Rpb24gdG8gYWRkIGEgbmV3IGNvbW1lbnQgdG8gYSBtZXNzYWdlXG5leHBvcnQgY29uc3QgYWRkQ29tbWVudFRvTWVzc2FnZSA9IGFzeW5jIChjaGFubmVsSWQsIG1lc3NhZ2VJZCwgY29tbWVudERhdGEpID0+IHtcbiAgLy8gQ3JlYXRlIG1lc3NhZ2UgZG9jdW1lbnQgaWYgbm90IGV4aXN0c1xuICBjb25zdCBtZXNzYWdlUmVmID0gZG9jKGRiLCBcImNoYW5uZWxzXCIsIGNoYW5uZWxJZCwgXCJtZXNzYWdlc1wiLCBtZXNzYWdlSWQpO1xuXG4gIHRyeSB7XG4gICAgLy8gR2V0IHRoZSBtZXNzYWdlIGRvY3VtZW50IHNuYXBzaG90XG4gICAgY29uc3QgbWVzc2FnZURvYyA9IGF3YWl0IGdldERvYyhtZXNzYWdlUmVmKTtcbiAgICBpZiAobWVzc2FnZURvYy5leGlzdHMoKSkge1xuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHJlcGxpZXMgY291bnQgZnJvbSB0aGUgbWVzc2FnZSBkYXRhXG4gICAgICBjb25zdCBjdXJyZW50UmVwbGllcyA9IG1lc3NhZ2VEb2MuZGF0YSgpLnJlcGxpZXMgfHwgMDtcblxuICAgICAgLy8gSW5jcmVtZW50IHRoZSByZXBsaWVzIGNvdW50IGJ5IDFcbiAgICAgIGNvbnN0IG5ld1JlcGxpZXNDb3VudCA9IGN1cnJlbnRSZXBsaWVzICsgMTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBtZXNzYWdlIGRvY3VtZW50IHdpdGggdGhlIG5ldyByZXBsaWVzIGNvdW50XG4gICAgICBhd2FpdCB1cGRhdGVEb2MobWVzc2FnZVJlZiwge1xuICAgICAgICByZXBsaWVzOiBuZXdSZXBsaWVzQ291bnQsXG4gICAgICB9KTtcblxuICAgICAgLy8gQWRkIGNvbW1lbnQgdG8gY29tbWVudHMgc3ViY29sbGVjdGlvblxuICAgICAgY29uc3QgY29tbWVudHNSZWYgPSBjb2xsZWN0aW9uKFxuICAgICAgICBkYixcbiAgICAgICAgXCJjaGFubmVsc1wiLFxuICAgICAgICBjaGFubmVsSWQsXG4gICAgICAgIFwibWVzc2FnZXNcIixcbiAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICBcImNvbW1lbnRzXCJcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGFkZERvYyhjb21tZW50c1JlZiwge1xuICAgICAgICB0ZXh0OiBjb21tZW50RGF0YS50ZXh0LFxuICAgICAgICBzZW5kZXI6IGNvbW1lbnREYXRhLnNlbmRlcixcbiAgICAgICAgdXNlclBob3RvOiBjb21tZW50RGF0YS51c2VyUGhvdG8sXG4gICAgICAgIGRhdGU6IERhdGUubm93KCksXG4gICAgICAgIGxpa2VzOiBjb21tZW50RGF0YS5saWtlcyB8fCAwLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiQ29tbWVudCBhZGRlZCBzdWNjZXNzZnVsbHkuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWVzc2FnZSBub3QgZm91bmQuXCIpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIGNvbW1lbnQ6IFwiLCBlcnJvcik7XG4gIH1cbn07XG5cbi8vIEZ1bmN0aW9uIHRvIHJldHJpZXZlIGFsbCBtZXNzYWdlcyBmcm9tIGEgY2hhbm5lbFxuZXhwb3J0IGNvbnN0IGdldEFsbE1lc3NhZ2VzRnJvbUNoYW5uZWwgPSBhc3luYyAoY2hhbm5lbElkKSA9PiB7XG4gIGNvbnN0IG1lc3NhZ2VzUmVmID0gY29sbGVjdGlvbihkYiwgXCJjaGFubmVsc1wiLCBjaGFubmVsSWQsIFwibWVzc2FnZXNcIik7XG4gIGNvbnN0IG9yZGVyZWRNZXNzYWdlc1F1ZXJ5ID0gcXVlcnkobWVzc2FnZXNSZWYsIG9yZGVyQnkoXCJ0aW1lc3RhbXBcIiwgXCJkZXNjXCIpKTtcblxuICB0cnkge1xuICAgIGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKG9yZGVyZWRNZXNzYWdlc1F1ZXJ5KTtcbiAgICBjb25zdCBtZXNzYWdlcyA9IFtdO1xuICAgIHF1ZXJ5U25hcHNob3QuZm9yRWFjaCgoZG9jKSA9PiB7XG4gICAgICBtZXNzYWdlcy5wdXNoKHsgaWQ6IGRvYy5pZCwgLi4uZG9jLmRhdGEoKSB9KTtcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlcy5yZXYpO1xuICAgIHJldHVybiBtZXNzYWdlcy5yZXZlcnNlKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgbWVzc2FnZXM6IFwiLCBlcnJvcik7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG5cbi8vIEZ1bmN0aW9uIHRvIHJldHJpZXZlIGFsbCBjb21tZW50cyBmcm9tIGEgbWVzc2FnZVxuZXhwb3J0IGNvbnN0IGdldEFsbENvbW1lbnRzRnJvbU1lc3NhZ2UgPSBhc3luYyAoY2hhbm5lbElkLCBtZXNzYWdlSWQpID0+IHtcbiAgY29uc3QgY29tbWVudHNSZWYgPSBjb2xsZWN0aW9uKGRiLCBcImNoYW5uZWxzXCIsIGNoYW5uZWxJZCwgXCJtZXNzYWdlc1wiLCBtZXNzYWdlSWQsIFwiY29tbWVudHNcIik7XG4gIGNvbnN0IGNvbW1lbnRzUXVlcnkgPSBxdWVyeShjb21tZW50c1JlZik7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhjb21tZW50c1F1ZXJ5KTtcbiAgICBjb25zdCBjb21tZW50cyA9IFtdO1xuICAgIHF1ZXJ5U25hcHNob3QuZm9yRWFjaCgoZG9jKSA9PiB7XG4gICAgICBjb21tZW50cy5wdXNoKHsgaWQ6IGRvYy5pZCwgLi4uZG9jLmRhdGEoKSB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gY29tbWVudHM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgY29tbWVudHM6IFwiLCBlcnJvcik7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgdXBkYXRlTGlrZXNJbkZpcmViYXNlID0gYXN5bmMgKGNoYW5uZWxJZCwgbWVzc2FnZUlkLCBuZXdMaWtlc0NvdW50KSA9PiB7XG4gIGNvbnNvbGUubG9nKCdVcGRhdGluZyBsaWtlcyBpbiBGaXJlYmFzZTonLCBjaGFubmVsSWQsIG1lc3NhZ2VJZCwgbmV3TGlrZXNDb3VudCk7XG4gIGNvbnN0IG1lc3NhZ2VSZWYgPSBkb2MoZGIsIFwiY2hhbm5lbHNcIiwgY2hhbm5lbElkLCBcIm1lc3NhZ2VzXCIsIG1lc3NhZ2VJZCk7XG4gIHRyeSB7XG4gICAgICBhd2FpdCB1cGRhdGVEb2MobWVzc2FnZVJlZiwge1xuICAgICAgICAgIGxpa2VzOiBuZXdMaWtlc0NvdW50LFxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZygnTGlrZXMgdXBkYXRlZCBzdWNjZXNzZnVsbHkgaW4gRmlyZWJhc2UuJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBsaWtlcyBpbiBGaXJlYmFzZTonLCBlcnJvcik7XG4gIH1cbn07XG5cblxuXG5leHBvcnQge2F1dGh9OyJdLCJuYW1lcyI6WyJpbml0aWFsaXplQXBwIiwiZ2V0QXV0aCIsInF1ZXJ5Iiwid2hlcmUiLCJnZXRGaXJlc3RvcmUiLCJjb2xsZWN0aW9uIiwiYWRkRG9jIiwiZ2V0RG9jcyIsImdldERvYyIsImRvYyIsInVwZGF0ZURvYyIsInNldERvYyIsIm9yZGVyQnkiLCJvblNuYXBzaG90IiwiRmllbGRWYWx1ZSIsImdldFN0b3JhZ2UiLCJyZWYiLCJ1cGxvYWRCeXRlcyIsImdldERvd25sb2FkVVJMIiwiZmlyZWJhc2VDb25maWciLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwicHJvamVjdElkIiwic3RvcmFnZUJ1Y2tldCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwiYXBwSWQiLCJhcHAiLCJhdXRoIiwiZGIiLCJhZGRVc2VyVG9GaXJlc3RvcmUiLCJ1c2VyIiwidXNlclJlZiIsInVpZCIsImRvY1NuYXAiLCJleGlzdHMiLCJwaG90byIsInBob3RvVVJMIiwiZGlzcGxheU5hbWUiLCJlbWFpbCIsImNyZWF0ZWRBdCIsIkRhdGUiLCJub3ciLCJpc0FkbWluIiwiY3JlYXRlUHJpdmF0ZUNoYW5uZWwiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJ1c2VySWQiLCJ1c2VyQ2hhbm5lbFJlZiIsImNoYW5uZWxTbmFwc2hvdCIsImFkZE1lc3NhZ2VUb1ByaXZhdGVDaGFubmVsIiwibWVzc2FnZURhdGEiLCJzZXRJbWFnZUxvYWRpbmciLCJjdXJyZW50VXNlciIsInByaXZhdGVDaGFubmVsUmVmIiwicHJpdmF0ZUNoYW5uZWxTbmFwIiwibWVzc2FnZXNSZWYiLCJpbWFnZVVybCIsImZldGNoSW1hZ2VGb3JNZXNzYWdlIiwidGV4dCIsInVzZXJOYW1lIiwidXNlclBob3RvIiwidGltZXN0YW1wIiwibGlrZXMiLCJyZXBsaWVzIiwibWVzc2FnZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJkYXRhIiwiYWRkTWVzc2FnZVRvQ2hhbm5lbCIsImNoYW5uZWxJZCIsImNoYW5uZWxSZWYiLCJuYW1lIiwibWVyZ2UiLCJsaXN0ZW5Gb3JDb21tZW50cyIsIm1lc3NhZ2VJZCIsImNhbGxiYWNrIiwiY29tbWVudHNSZWYiLCJvcmRlcmVkQ29tbWVudHNRdWVyeSIsInVuc3Vic2NyaWJlIiwic25hcHNob3QiLCJuZXdDb21tZW50cyIsImRvY0NoYW5nZXMiLCJmb3JFYWNoIiwiY2hhbmdlIiwidHlwZSIsInB1c2giLCJpZCIsImxpc3RlbkZvck1lc3NhZ2VzIiwib3JkZXJlZE1lc3NhZ2VzUXVlcnkiLCJtZXNzYWdlcyIsInJldmVyc2UiLCJhZGRDb21tZW50VG9NZXNzYWdlIiwiY29tbWVudERhdGEiLCJtZXNzYWdlUmVmIiwibWVzc2FnZURvYyIsImN1cnJlbnRSZXBsaWVzIiwibmV3UmVwbGllc0NvdW50Iiwic2VuZGVyIiwiZGF0ZSIsImdldEFsbE1lc3NhZ2VzRnJvbUNoYW5uZWwiLCJxdWVyeVNuYXBzaG90IiwicmV2IiwiZ2V0QWxsQ29tbWVudHNGcm9tTWVzc2FnZSIsImNvbW1lbnRzUXVlcnkiLCJjb21tZW50cyIsInVwZGF0ZUxpa2VzSW5GaXJlYmFzZSIsIm5ld0xpa2VzQ291bnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/firebase.js\n"));

/***/ })

});